--- 网络包注册
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangjingyi.
--- DateTime: 2023/5/22 13:10

printDebug("加载 PacketDispatcher.lua 文件")
local PacketDispatcher = {}
--_receiversMap = {}
PacketDispatcher.Event = {
	OnConnect = "PacketDispatcher.Event.OnConnect",
	OnOpen = "PacketDispatcher.Event.OnOpen",
	OnDisConnect = "PacketDispatcher.Event.OnDisConnect",
}
-------------------------------- start Login   pack 包 --------------------------------------
LoginNetController = require("application.app.net.webscoket.controller.loginNetController")
ServerConfigNetController = require("application.app.net.webscoket.controller.serverConfigNetController")
-------------------------------- end   Login    pack 包 --------------------------------------


packetValue = nil
PacketDispatcher.urlString = nil
--- 链接建立通知lua
function OnConnectServer(url)
	PacketDispatcher.urlString = url
	---链接成功
	GlobalEventSystem:Fire(PacketDispatcher.Event.OnConnect, PacketDispatcher.urlString)
end

function OnDisConnectFromServer()
	printDebug("Game server disconnected!!")
	GlobalEventSystem:Fire(PacketDispatcher.Event.OnDisConnect)
end

function OnReceiveLineFromServer(bytes)
	local str = bytes
	local packet = readBytes(str)
	PacketDispatcher:Receive(packet)
end

function PacketDispatcher:SendMessage(bytes)
	-- NetManager:SendMessageEvent(bytes)
end

function PacketDispatcher:Init()
	-------------------------------- start Login   pack 包 --------------------------------------

	LoginNetController:Init()
	-------------------------------- end   Login    pack 包 --------------------------------------
end

---function PacketDispatcher:Receive(str)
--    printDebug("PacketDispatcher:Receive(packet) line 50," .. type(packet))
--    PacketDispatcher.packetValue = packet
--    GlobalEventValue:Fire(PacketDispatcher.packetValue:protocolId(), PacketDispatcher.packetValue)
--end

function PacketDispatcher:Receive(packet)
	--packetValue = packet
	ProtocolManager:FireProtocolConfigEvent(packet:protocolId(), packet)
end

return PacketDispatcher
