--- UIModelView 总管理类
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangjingyi.
--- DateTime: 2023/5/17 15:53


PrintDebug("require ui framework lua scripts start")
require("application.app.ui.framework.luaUIObject")
require("application.app.ui.framework.luaObject")
require("application.app.ui.framework.UIBaseView")
require("application.app.ui.framework.UIView")

PrintDebug("require ui framework lua scripts end")

---
PrintDebug("require UI commonUI lua scripts start")

require("application.app.ui.commonUI.UICommonView")
UICommonViewController = require("application.app.ui.commonUI.UICommonViewController"):GetInstance()
require("application.app.ui.commonUI.dialog")
DialogConfig = require("application.app.ui.commonUI.dialogConfig")
require("application.app.ui.commonUI.loadingRotate")

PrintDebug("require UI commonUI lua scripts end")

PrintDebug("require UI commonUI lua scripts config start")

require("application.app.ui.config.UIConfig")
LoginConfig = require("application.app.ui.login.loginConfig")

PrintDebug("require UI commonUI lua scripts config end")

PrintDebug("require UI View Lua Scirpt start")
require("application.app.ui.generateScripts.UIModules.LoginPanelView")
require("application.app.ui.generateScripts.UIModules.GameMainUIPanelView")
require("application.app.ui.bag.modelView.bagModelUIView")
require("application.app.ui.generateScripts.UIModules.BagUIPanelView")

PrintDebug("require UI View Lua Scirpt end")

PrintDebug("start require UI controller lua scripts ing ...")

LoginUIController = require("application.app.ui.login.LoginUIController"):GetInstance()
GameMainUIViewController = require("application.app.ui.gameMain.gameMainUIViewController"):GetInstance()
BagUIController = require("application.app.ui.bag.bagUIController").GetInstance()

PrintDebug("end require UI controller lua scripts ing ...")
PrintDebug("loading ui or common or other lua script config")
require("application.app.config.weaponConfig")
require("application.app.config.gameConfig")

PrintDebug("end loading lua scirpt config")

local UIComponentManager = {}

UIComponentManager.UIEventNotificationDict = {}

function UIComponentManager:InitUIModelComponent()
    --- 创建一个新的table ，不会读取到正确 元地址

end

--- 调用事件
--- 当前函数为全局函数 放置与全局表中
function DispatchEvent(name, body)
    local eventUI = require("application.app.ui.commonUI.UINotification"):new(name, body)
    local eventAction = UIComponentManager.UIEventNotificationDict[name]
    if eventAction ~= nil then
        eventAction(eventUI)
    end
end

return UIComponentManager
