---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/6/23 下午11:09
---
---@class UIMediator
local UIMediator = class("UIMediator")
--- 初始化
function UIMediator:ctor()
    -- 子物体或者子面板
    ---@type table<number,UIPrefab>
    self._childList = false
    ---@type UIPrefab
    self._parent = false
end

function UIMediator:GetUIPath(index)
end

function UIMediator:vGetUIPath()

end
function UIMediator:Create()

end

-- 创建 子物体
function UIMediator:CreateChildPrefabAsync(cls)

end
function UIMediator:OnInit()
    self:vOnInit();
end
function UIMediator:vOnInit()
end

function UIMediator:OnStart()
    self:vOnStart()
end

function UIMediator:vOnStart()
end

function UIMediator:OnHide()
    self:vOnHide()
end
--------------------------------------------------------
--- private
--- 重写 在子类
--------------------------------------------------------
function UIMediator:vOnHide()
end
--- 向下发送更新UI（只能在实例内部调用该函数，如：self:SendUpdateUI("zvlc")，与vOnUpdateUI配合使用。自己不会调vOnUpdateUI。
--- @param id string 刷新ID标识
--- @param argument table 参数
--- @param dummy boolean 不要管这个参数 在 UIMediatorClass 内管理
function UIMediator:SendUpdateUI(id, argument, dummy)
    if string.IsNullOrEmpty(id) then
        PrintError("id", id, "错误")
        return
    end
    if not self._childList then
        PrintError("当前", self.__classname, "没有创建子物体或者子面板")
        return
    end
    for _, v in pairs(self._childList) do
        if dummy then
            self:vOnUpdateUI(id, argument)
            return
        end
        -- 递归 向子物体发送
        v:SendUpdateUI(id, argument, dummy)
    end
end
--- 向上发送操作（只能在实例内部调用该函数，如：self:SendAction("zvlc")，与vOnAction配合使用。自己不会调vOnAction。
--- @param id string 操作ID标识
--- @param argument table 参数
--- @param dummy boolean 不要管这个参数
function UIMediator:SendAction(id, argument, dummy)
    if not self._parent then
        PrintError(self.__classname, "当前没有通知没有父组件")
        return
    end
    if self._parent then
        if dummy then
            self._parent:vOnAction(id, argument)
            return
        end
        self._parent:SendAction(id, argument, dummy)
    end
end

--- 重载
--- 更新UI回调，以 module -> mediator -> parent UI prefab -> child UI prefab 顺序向下传递（其中任何一个都可以自主发起下发传递，不必然从module开始），与SendUpdateUI配合使用
--- @param id string|number 更新标识，推荐使用字符串和数字
--- @param argument table 自定义更新参数
--- @return boolean 是否阻断向下传递刷新，true为阻断
function UIMediator:vOnUpdateUI(id, argument)
end
--- 重载
--- 操作回调，以 child UI prefab -> parent UI prefab -> mediator -> module顺序向上传递（其中任何一个都可以自主发起下发传递，不必然从child UI prefab开始）,与SendAction配合使用
--- @param id string|number 操作标识，推荐使用字符串和数字
--- @param argument table 自定义操作参数
--- @return boolean 是否阻断向上传递操作，true为阻断
function UIMediator:vOnAction(id, argument)

end

return UIMediator