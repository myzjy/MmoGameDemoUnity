---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2024/6/23 下午11:51
---

---@class UIPrefabAsync
local UIPrefabAsync = class("UIPrefabAsync")

function UIPrefabAsync:ctor()
    self._uiAsset = false
    self._prefab = false
    self._parentTf = false

    ---@type UIMediator|boolean
    self._mediator = false
    self._parent = false
    self._child = {}
    self._prefabClassAsync = {}
    self._imageAsync = {}
    self._image2AssetPath = {}
    self._audioCfg = false
    self._realLayer = false

    self._customID = GlobalEnum.EInvalidDefine.ID
    self._styleIndex = 1
    self._tagName = false
    self._isControlInputByVisible = true -- 是否通过可见性控制 vOnInputUpdateUI 处理输入事件

    self._autoPlayAnimDelay = {  -- 异步播放动画队列
        Queue = {},
        AccumulationTime = 0,
        Enable = false
    }
    ---@type {tbl:UIPrefab, func:function, param:any}[]
    self._preDestroyDelegates = {}
    self._operation={}
end
---获取索引对应ui样式的资源路径
---@param style number ui样式索引
---@return string ui样式的资源路径
function UIPrefabAsync:GetResourcePath(style)
    self._styleIndex = style or 1
    local styleArray = self:vGetPath()
    if not styleArray or #styleArray == 0 then
        return nil
    end

    return styleArray[self._styleIndex]
end


function UIPrefabAsync:Create(mediator, parentPrefabClass, prefabClassDef, parentTf, argument, customID, style, layer, asyncLoadID, bNotAddLayer, insertFirst)
    self._mediator = mediator or false

    self._parentPrefabClass = parentPrefabClass or false
    self._parentTf = parentTf or false

    self._prefabClassDef = prefabClassDef or false
    self._argument = argument or false

    self._customID = customID or GlobalEnum.EInvalidDefine.ID
    self._style = style or false
    self._layer = layer or false
    self._insertFirst = insertFirst or false

    self._assetName = prefabClassDef:GetResourcePath(style)
    AssetServices:OnLoadAssetAsync(self._assetName, handle(self.OnLoadAssetCompleted, self))
end


function UIPrefabAsync:OnLoadAssetCompleted(assetType, assetName, obj)
    if not assetName then
        PrintError("[%s]  UIPrefabClassAsyn.OnLoadAssetCompleted : invalid parameter", self.__classname)
        return
    end

    if assetName ~= self._assetName then
        return
    end

    --[[if not obj and asyncLoadID ~= 0 then
        NGRLogE(self.__classname, "UIPrefabClassAsyn.OnLoadAssetCompleted : load widget failed. Path = " .. self._assetName)
    end]]

    if self._mediator then
        self._mediator:CreatePrefabClassAsyncCompleted(self, self._prefabClassDef, self._argument, self._customID, self._style, self._layer, -1)
    elseif self._parentPrefabClass then
        self._parentPrefabClass:CreateChildPrefabClassAsyncCompleted(self, self._prefabClassDef, self._parentTf, self._argument, self._customID, self._style, -1, self._insertFirst)
    end
end

function UIPrefabAsync:SendUpdateUI(id, argument)
    if not id then
        PrintError("%s \t  UIPrefabClassAsyn.SendUpdateUI : invalid parameter",self.__classname)
    end
    local data = {
        id = id,
        argument = argument
    }
    self._operation[#self._operation + 1] = data
end

function UIPrefabAsync:ApplyUpdateUI(prefabClas)
    if not prefabClas then
        PrintError("%s \t  UIPrefabClassAsyn.ApplyUpdateUI : invalid parameter",self.__classname)
        return
    end

    for i = 1, #self._operation do
        local data = self._operation[i]
        if data then
            prefabClas:SendUpdateUI(data.id, data.argument, true)
        else
            PrintError("%s \t  UIPrefabClassAsyn.ApplyUpdateUI : prefab is been destoried by last update ui, it is a dangerous logic.",prefabClas.__classname)
        end
    end
    for i = #self._operation, 1, -1 do
        table.remove(self._operation,i)
    end
end

return UIPrefabAsync

